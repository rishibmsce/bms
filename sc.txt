
scala_commands = """
scala> 8 * 5 + 2
scala> 0.5 * res0
scala> "Hello, " + res0
scala> val answer = 8 * 5 + 2
scala> 0.5 * answer
scala> answer = 0
var counter = 0
counter = 1
val greeting: String = null
val greeting: Any = "Hello"
val xmax, ymax = 100
var greeting, message: String = null
1.toString()
1.to(10)
"Hello".intersect("World")
1 to 10
counter += 1
"Bonjour".sorted
import scala.math._
sqrt(2)
pow(2, 4)
min(3, Pi)
scala.math.sqrt(2)
val s = "Hello"
s(4)
if (x > 0) 1 else -1
val s = if (x > 0) 1 else -1
if (x > 0) s = 1 else s = -1
if (x > 0) 1
if (x > 0) { 1 } else if (x == 0) 0 else -1
if (n > 0) { r = r * n; n -= 1 }
s = s0 + (v - v0) * t +
0.5 * (a - a0) * t * t
if (n > 0) {
r = r * n
n -= 1
}
val distance = { val dx = x - x0; val dy = y - y0; sqrt(dx * dx + dy * dy) }
{ r = r * n; n -= 1 }
x = y = 1
print("Answer: ")
println(42)
println("Answer: " + 42)
printf("Hello, %s! You are %d years old.\n", name, age)
print(f"Hello, $name! In six months, you'll be ${age + 0.5}%7.2f years old.%n")
import scala.io
val name = StdIn.readLine("Your name: ")
print("Your age: ")
val age = StdIn.readInt()
println(s"Hello, ${name}! Next year, you will be ${age + 1}.")
for (i <- 1 to n) r = r * i
val s = "Hello"
var sum = 0
for (i <- 0 to s.length - 1) sum += s(i)
for (i <- 1 to 3; j <- 1 to 3) print(f"${10 * i + j}%3d")
for (i <- 1 to 3; j <- 1 to 3 if i != j) print(f"${10 * i + j}%3d")
for (i <- 1 to 3; from = 4 - i; j <- from to 3) print(f"${10 * i + j}%3d")
for (i <- 1 to 10) yield i % 3
for (c <- "Hello"; i <- 0 to 1) yield (c + i).toChar
for (i <- 0 to 1; c <- "Hello") yield (c + i).toChar
for {
  i <- 1 to 3
  from = 4 - i
  j <- from to 3
}
def abs(x: Double) = if (x >= 0) x else -x
def fac(n: Int) = {
  var r = 1
  for (i <- 1 to n) r = r * i
  r
}
def fac(n: Int): Int = if (n <= 0) 1 else n * fac(n - 1)
def decorate(str: String, left: String = "[", right: String = "]") = left + str + right
decorate("Hello")
decorate("Hello", "<<<", ">>>")
decorate("Hello", ">>>[")
decorate(left = "<<<", str = "Hello", right = ">>>")
def sum(args: Int*) = {
  var result = 0
  for (arg <- args) result += arg
  result
}
val s = sum(1, 4, 9, 16, 25)
val s = sum(1 to 5: _*)
def sayHello() { println("Hello") }
def getMessage() = { "Hello" }
def box(s: String) {
  val border = "-" * (s.length + 2)
  print(f"$border%n|$s|%n$border%n")
}
lazy val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString
val words = scala.io.Source.fromFile("/usr/share/dict/words").mkString
def words = scala.io.Source.fromFile("/usr/share/dict/words").mkString
throw new IllegalArgumentException("x should not be negative")
if (x >= 0) { sqrt(x) } else throw new IllegalArgumentException("x should not be negative")
try {
  process(url)
} catch {
  case _: MalformedURLException => println(s"Bad URL: $url")
  case ex: IOException => ex.printStackTrace()
}
val in = new URL("http://horstmann.com/fred.gif").openStream()
try {
  process(in)
} finally {
  in.close()
}
try { ... } catch { ... } finally { ... }
def signum1(x: Int) = if (x == 0) 0 else if (x < 0) -1 else 1
for (i <- 0 to 10 reverse) println(i)
for (i <- 10 to 0 by -1) println(i)
def countdown1(x: Int){
  for (i <- x to 0 by -1) println(i)
}
val nums = new Array[Int](10)
val a = new Array[String](10)
val s = Array("Hello", "World")
import scala.collection.mutable.ArrayBuffer
val b = ArrayBuffer[Int]()
b += 1
b += (1, 2, 3, 5)
b ++= Array(8, 13, 21)
b.trimEnd(5)
b.insert(2, 6)
b.insert(2, 7, 8, 9)
b.remove(2)
b.remove(2, 3)
for (i <- 0 until a.length) println(s"$i: ${a(i)}")
0 until a.length by 2
val a = Array(2, 3, 5, 7, 11)
val result = for (elem <- a) yield 2 * elem
for (elem <- a if elem % 2 == 0) yield 2 * elem
val result = for (elem <- a if elem >= 0) yield elem
val positionsToRemove = for (i <- a.indices if a(i) < 0) yield i
for (i <- positionsToRemove.reverse) a.remove(i)
Array(1, 7, 2, 9).sum
ArrayBuffer("Mary", "had", "a", "little", "lamb").max
val b = ArrayBuffer(1, 7, 2, 9)
val bSorted = b.sorted
a.mkString(" and ")
a.mkString("<", ",", ">")
val matrix = Array.ofDim[Double](3, 4)
matrix(row)(column) = 42
val scores = Map("Alice" -> 10, "Bob" -> 3, "Cindy" -> 8)
val scores = scala.collection.mutable.Map("Alice" -> 10, "Bob" -> 3, "Cindy" -> 8)
val scores = scala.collection.mutable.Map[String, Int]()
val scores = Map(("Alice", 10), ("Bob", 3), ("Cindy", 8))
val bobsScore = scores("Bob")
val bobsScore = if (scores.contains("Bob")) scores("Bob") else 0
val bobsScore = scores.getOrElse("Bob", 0)
scores("Bob") = 10
scores("Fred") = 7
scores += ("Bob" -> 10, "Fred" -> 7)
scores -= "Alice"
val newScores = scores + ("Bob" -> 10, "Fred" -> 7)
scores = scores + ("Bob" -> 10, "Fred" -> 7)
scores += ("Bob" -> 10, "Fred" -> 7)
for ((k, v) <- map) process k and v
scores.keySet
for (v <- scores.values) println(v)
for ((k, v) <- map) yield (v, k)
val scores = scala.collection.mutable.SortedMap("Alice" -> 10, "Fred" -> 7, "Bob" -> 3, "Cindy" -> 8)
val t = (1, 3.14, "Fred")
val second = t._2
"New York".partition(_.isUpper)
val symbols = Array("<", "-", ">")
val counts = Array(2, 10, 2)
val pairs = symbols.zip(counts)
for ((s, n) <- pairs) print(s * n)
"""

file_path = "/mnt/data/scala_commands.txt"
with open(file_path, "w") as f:
    f.write(scala_commands.strip())

file_path


scala programs
[5/25, 7:08 PM] Shlok🐤: LINEAR SEARCH SCALA
import scala.io.StdIn._
object LinearSearch {
    def main(args : Array[String]): Unit ={
        println("Enter the number of elements in the array :")
        val size=readInt()
        val arr=new Array[Int](size)
        for(i<- 0 until size){
            print(s"enter the element ${i+1} :")
            arr(i)=readInt()
        }
        println("Enter the element to search for : ")
        val target=readInt()
        var found = false
        for(i<-arr.indices){
            if (arr(i)==target){
                found=true
                print(s"element found at index ${i+1}") 
                return}
        }
        if(found==false) {
            print("element not found")
            return
    }
}
}
[5/25, 8:06 PM] Shlok🐤: FIBONACCI
object Fibonacci{
    def main(args : Array[String]): Unit ={
        var a=0
        var b=1
        for(i <- 0 to 10){
            print(s"$a ")
            var temp=a+b
            a=b
            b=temp
            
        }
    }
}
[5/25, 11:36 PM] Shlok🐤: SPARK ERROR COUNT
import org.apache.spark.{SparkConf, SparkContext}

object ErrorCountFromLog {
  def main(args: Array[String]): Unit = {
    // Create Spark configuration and context
    val conf = new SparkConf().setAppName("ErrorCounter").setMaster("local")
    val sc = new SparkContext(conf)

    // Read the log file (change the path as needed)
    val logFile = sc.textFile("/path/to/your/logfile.log")

    // Use flatMap to split lines into words
    val words = logFile.flatMap(_.split("\\s+")) // splits by whitespace

    // Filter for the word "error" (case-insensitive)
    val errors = words.filter(word => word.toLowerCase == "error")

    // Count the number of times "error" appears
    val errorCount = errors.count()

    // Print the result
    println(s"Number of 'error' entries in the log file: $errorCount")

    sc.stop()
  }
}
